stages:
  - build-frontend
  - deploy-frontend
  - build-backend
  - deploy-backend

variables:
  IMAGE_TAG: $CI_COMMIT_TAG

build-frontend:
  stage: build-frontend
  image: node:latest
  script:
    - cd frontend  
    - npm install  
    - npm run build
    - ls -la
  artifacts:
    paths:
      - frontend/dist

upload to s3:
  stage: deploy-frontend
  needs:
    - build-frontend
  image:
    name: amazon/aws-cli
    entrypoint: [""]
  script:
    - aws --version
    - cd frontend/dist/frontend/browser
    - ls -la
    - aws s3 cp . s3://$AWS_S3_BUCKET/ --recursive

build-image:
  stage: build-backend
  image: docker:26.1.0
  services:
    - docker:19.03.12-dind
  variables:
        DOCKER_TLS_CERTDIR: "/certs"
  before_script:
    - echo $DOCKER_TOKEN | docker login -u $DOCKER_USERNAME --password-stdin
  script:
    - docker build -t $IMAGE_NAME:$IMAGE_TAG ./backend
    - docker images
    - docker push $IMAGE_NAME:$IMAGE_TAG
  rules:
    - if: '$CI_COMMIT_TAG'


ansible-to-ec2:
  stage: deploy-backend
  image: williamyeh/ansible:alpine3
  before_script:
    - echo "$PRIVATE_KEY" > ./temp_key.pem
    - chmod 600 ./temp_key.pem
    - export ANSIBLE_HOST_KEY_CHECKING=False
  script:
    - ansible --version
    - ansible-playbook -i hosts.ini deploy_backend.yml --private-key=./temp_key.pem
    - rm -f ./temp_key.pem
